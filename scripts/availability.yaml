issues:
  - title: Podにヘルスチェックを設定する（probe）
    body: |
      Podにヘルスチェックを設定することで、Podの状態を監視し、異常が発生した場合に自動的に再起動や再スケジュールを行うことができます。これにより、アプリケーションの可用性が向上します。
      Podのヘルスチェック機能には3種類あります。

      - Liveness Probe: Podが正常に動作しているかを確認し、異常があれば再起動します。
      - Readiness Probe: Podがトラフィックを受け付ける準備ができているかを確認し、準備ができていない場合はトラフィックを受け付けません。
      - Startup Probe: Podの起動が完了したかを確認し、起動中のPodに対してはLivenessやReadinessのチェックを行いません。

      # プラクティス
      - フロントエンドおよびバックエンドのPodにLivenessおよびReadiness Probeを設定する
        - typeは`httpGet`
        - pathは以下の通り
          - フロントエンド: `/`
          - バックエンド: `/api/message`
        - portはコンテナの待ち受けポートを指定する
        - 監視間隔は何秒でもいいが、失敗する順番は rediness -> liveness にすること
          - こうすることでまずServiceのトラフィックを受け付けないようにし、次にPodを再起動することができる

  - title: Podにgracefulshutdownを設定する
    body: |
      ## gracefulshutdownとは？
      
      アプリケーションのPodが停止する際に、安全に終了するための仕組みです。
      
      ## なぜ必要なのか？
      
      Podを停止する際、以下の2つの処理が**同時に**実行されます：
      1. Podの停止処理
      2. ServiceからそのPodを除外する処理
      
      この2つの処理が同時に行われるため、「Podは停止中だが、まだServiceからトラフィックが送られてくる」という状況が発生します。これにより、ユーザーのリクエストが失敗してしまいます。
      
      ## どうやって解決するか？
      
      gracefulshutdownを設定することで、以下の順序で安全に停止できます：
      
      1. **preStop処理**：Podが停止する前に、Serviceからの除外を待つため少し待機（Sleep）します
      2. **terminationGracePeriodSeconds**：Podが完全に停止するまでの猶予時間を設定します
      
      ### 具体的な流れ
      
      1. Podに停止指示が出される
      2. **preStop処理が実行**：数秒待機して、Serviceからの除外を待つ
      3. **SIGTERMシグナル送信**：アプリケーションに「終了準備をしてください」という合図
      4. **アプリケーションの終了処理**：現在処理中のリクエストを完了させる
      5. **猶予期間終了**：設定した時間内に終了しない場合は強制終了
      
      ### 設定値の目安
      
      - **preStop処理**：5-10秒程度の待機
      - **terminationGracePeriodSeconds**：30秒程度（preStop時間 + アプリケーション終了時間）

      # プラクティス
      - フロントエンドおよびバックエンドのPodにgracefulshutdownを設定する
        - `terminationGracePeriodSeconds`を設定して、Podが停止するまでの猶予時間を設定する
        - `preStop`フックを設定して、Serviceからの除外を待つためにSleepさせる

  - title: Podにaffinityを設定する
    body: |
      Podのaffinityを設定することで、Podの配置を制御し、可用性やパフォーマンスを向上させることができます。
      
      ## affinityの種類
      
      - **nodeAffinity**: 特定のノードにPodを配置する
      - **podAffinity**: 特定のPodと同じノードにPodを配置する
      - **podAntiAffinity**: 特定のPodと異なるノードにPodを配置する
      
      ## 設定レベル
      
      - **requiredDuringSchedulingIgnoredDuringExecution**: 必須条件（Hard制約）
      - **preferredDuringSchedulingIgnoredDuringExecution**: 優先条件（Soft制約）
      
      ## 実践的な使用例
      
      - **高可用性のための分散配置**: 同じアプリケーションのPodを異なるノードに配置
      - **通信効率のための集約配置**: 連携するアプリケーション同士を同じノードに配置
      - **リソース効率化**: 特定のハードウェアリソースを持つノードにPodを配置
      
      # プラクティス
      - フロントエンドとバックエンドのDeploymentにaffinityを設定する
        - **フロントエンドのPod同士**: 異なるノードに分散配置（podAntiAffinity）
        - **バックエンドのPod同士**: 異なるノードに分散配置（podAntiAffinity）
        - **フロントエンドとバックエンド**: 同じノードに配置（podAffinity）
        - labelSelectorは各アプリケーションの`app`ラベルを使用する

  - title: PodDisruptionBudget（PDB）を設定する
    body: |
      PodDisruptionBudget（PDB）は、計画的なメンテナンス（ノードのアップグレードなど）中に同時に停止できるPodの数を制限することで、アプリケーションの可用性を保証します。

      ## PDBの重要性

      Kubernetesクラスターでは、以下のような計画的なメンテナンスが発生します：
      - ノードのアップグレード
      - クラスターのスケーリング
      - ノードの再起動

      PDBを設定することで、これらのメンテナンス中でも最低限必要なPod数を維持し、サービスの継続性を保証できます。特に EKS AutoMode はノードを最大21日で強制的に入れ替えるためPDBの設定は非常に重要です。

      ## PDBの設定項目

      - **minAvailable**: 最低限維持する必要があるPod数（数値または割合）
      - **maxUnavailable**: 同時に停止できる最大Pod数（数値または割合）
      - **selector**: 対象となるPodを選択するためのラベルセレクター

      ## 設定の考え方

      - **単一Pod構成**: `minAvailable: 1` で最低1つのPodを維持
      - **複数Pod構成**: `minAvailable: 50%` で半数以上のPodを維持
      - **高可用性要求**: より厳しい条件を設定

      # プラクティス
      - フロントエンドおよびバックエンドにPodDisruptionBudget（PDB）を設定する
        - 最低1つのPodを常に稼働状態にする
