issues:
  - title: EKSクラスタエンドポイントのアクセス制御
    body: |
      EKSクラスタのAPIサーバーへのアクセスを制御することで、セキュリティを向上させることができます。EKSクラスタのエンドポイントには、プライベートエンドポイントとパブリックエンドポイントがあり、それぞれ異なる特性を持ちます。

      ## エンドポイントの種類

      ### パブリックエンドポイント（デフォルト）
      - インターネット経由でAPIサーバーにアクセス可能
      - パブリックIPアドレスが割り当てられる
      - EKSの設定でアクセス可能なCIDRブロックを指定可能

      ### プライベートエンドポイント
      - VPC内からのみAPIサーバーにアクセス可能
      - プライベートIPアドレスが割り当てられる
      - クラスタのセキュリティグループでアクセス制御が可能

      ### パブリック + プライベート（混合モード）
      - 両方のエンドポイントが有効
      - 柔軟なアクセス制御が可能
      - 段階的な移行に適している

      ## セキュリティ上の考慮事項

      ### パブリックエンドポイントの場合
      - 必ずCIDRブロックでアクセス制限を設定する
      - 自組織のパブリックIPアドレスのみ許可
      - 0.0.0.0/0（全開放）は避ける

      ### プライベートエンドポイントの場合
      - VPC内にENI（Elastic Network Interface）が作成される
      - ノードからクラスターへの通信がVPC内で完結
      - ENIにはEKSクラスタのセキュリティグループが適用される

      ## 運用上の注意点

      ### パブリックエンドポイント使用時
      - CI/CDパイプラインからのアクセスが容易
      - 外部からの管理操作が可能

      ### プライベートエンドポイント使用時
      - CI/CDはVPC内リソースからの実行が必要
      - VPC内のbastion hostやVPN接続でアクセス可能

      ## 設定の移行

      プライベートからパブリック、またはその逆への変更は可能ですが、以下の点に注意：
      - CI/CDパイプラインの設定変更が必要
      - DNS解決の動作が変更される

      # プラクティス
      - EKSクラスタのエンドポイント設定を確認・変更する
        - 作業端末がEKSと同じネットワークの場合
          - EKSのパブリックエンドポイントを無効にする
          - クラスタのセキュリティグループに作業端末のIPアドレスを追加
        - 作業端末がEKS外部のネットワークの場合
          - EKSのパブリックエンドポイントを有効にする
          - エンドポイントのアクセス制限で作業端末のIPアドレスを許可する

  - title: EKSアクセスエントリーによる認証・認可の管理
    body: |
      EKSアクセスエントリー（Access Entry）は、EKSクラスタへのアクセス管理を効率化する機能です。従来のaws-authConfigMapに代わる新しいアクセス管理手法として、より安全で管理しやすい方法を提供します。

      [EKS アクセスエントリを使用して Kubernetes へのアクセスを IAM ユーザーに許可する](https://docs.aws.amazon.com/ja_jp/eks/latest/userguide/access-entries.html)

      ## アクセスエントリーの概要

      ### 従来の課題（aws-auth ConfigMap）
      - ConfigMapの直接編集が必要で運用が複雑
      - 設定ミスによるクラスタアクセス喪失のリスク
      - IAMユーザー/ロールとKubernetesユーザーのマッピングが不透明

      ### アクセスエントリーの利点
      - AWS APIを通じた管理で運用が簡素化
      - IAMロール/ユーザーとKubernetes権限の明確な関連付け
      - Terraformなどのインフラコードでの管理が容易
      - 設定変更時のクラスタアクセス喪失リスクの軽減

      ## アクセスエントリーの種類

      ### 標準アクセスエントリー
      - IAMプリンシパル（ユーザー/ロール）を直接マッピング
      - Kubernetesグループへの所属を定義
      - カスタムポリシーやクラスタポリシーを適用可能

      ### EKS管理ポリシー
      AWSが提供する定義済みポリシー：
      - `AmazonEKSClusterAdminPolicy` - クラスタ管理者権限
      - `AmazonEKSAdminPolicy` - 標準管理者権限
      - `AmazonEKSEditPolicy` - リソース編集権限
      - `AmazonEKSViewPolicy` - 読み取り専用権限

      ## セキュリティのベストプラクティス

      ### 最小権限の原則
      - ユーザー/ロールに必要最小限の権限のみ付与
      - 開発・ステージング・本番環境で権限を分離
      - 一時的なアクセスには期限付きロールを使用

      ### ロールベースの管理
      - 個人ユーザーではなくIAMロールを使用
      - 部署・チーム単位でのロール分割
      - 外部IDプロバイダーとの連携（OIDC/SAML）

      # プラクティス
      - EKSクラスタにアクセスエントリーを設定するTerraformコードを作成する
        - 任意の追加のIAMユーザー/ロールのアクセスエントリーを作成する
        - 上記アクセスエントリーに任意のポリシーを適用する

  - title: EKSクラスタの監査ログ有効化
    body: |
      EKSクラスタの監査ログ（Audit Log）を有効化することで、クラスタでの全てのAPI操作を記録し、セキュリティインシデントの調査や法令遵守（コンプライアンス）に役立てることができます。

      [Amazon EKS コントロールプレーンのログ記録](https://docs.aws.amazon.com/ja_jp/eks/latest/userguide/control-plane-logs.html)

      ## 監査ログの概要

      ### EKSで有効化できるログタイプ
      - **api** - Kubernetes API サーバーのログ
      - **audit** - Kubernetes 監査ログ（重要）
      - **authenticator** - AWS IAM Authenticator のログ
      - **controllerManager** - Kubernetes コントローラーマネージャーのログ
      - **scheduler** - Kubernetes スケジューラーのログ

      ### 監査ログの重要性
      - すべてのKubernetes APIへのリクエストを記録
      - 誰が、いつ、何を実行したかを追跡可能
      - セキュリティインシデントの調査に必要
      - コンプライアンス要件の遵守に必要

      ## 監査ログで記録される情報

      ### リクエスト情報
      - APIエンドポイント（例：/api/v1/pods）
      - HTTPメソッド（GET、POST、PUT、DELETE）
      - リクエスト元のユーザー情報
      - リクエスト時刻とレスポンス時刻

      ### 認証・認可情報
      - IAMユーザー/ロール情報
      - Kubernetesユーザー/グループ情報
      - 認可の成功/失敗状況

      ### リソース操作情報
      - 操作対象のKubernetesリソース
      - 作成・変更・削除されたオブジェクトの詳細
      - リクエスト結果（成功・失敗）

      ## CloudWatch Logsでの監査ログ分析

      ### ログストリーム構成
      監査ログは以下の形式でCloudWatchログストリームに出力されます。EKSはロググループがない場合、自動で作成します。ただし、自動で作成するロググループは有効期限が設定されていないため、手動で作成することを推奨します。
      ```
      /aws/eks/<cluster-name>/cluster
      ```

      # プラクティス
      - eksモジュールを拡張する
        - EKSクラスタのログを出力するCloudWatch Logsのロググループを作成する
          - 任意の有効期限を設定する
        - EKSクラスタで監査ログを有効化する
          - cluster loggingの設定し監査ログ（audit）を出力させる
          - (監査ログ以外も任意で有効にして良い)

      # 更に発展的なプラクティス
      このプラクティスは余裕がなければやらなくてもいいです。

      - EKSクラスタの監査ログをS3バケットに出力する
        - CloudWatch LogsからS3バケットへのエクスポートを設定する
      - S3の監査ログの分析をAthenaで行う

  - title: Kubernetes NetworkPolicyによるネットワークセキュリティ
    body: |
      Kubernetes NetworkPolicyは、Pod間の通信を制御するセキュリティ機能です。デフォルトでは、すべてのPod間通信が許可されているため、NetworkPolicyを使用してネットワークレベルでのセグメンテーションを実装することで、セキュリティを大幅に向上させることができます。

      [ネットワークポリシー](https://kubernetes.io/ja/docs/concepts/services-networking/network-policies/)

      ## NetworkPolicyの概要

      ### デフォルトの動作
      - Kubernetesクラスタでは、すべてのPod間通信がデフォルトで許可
      - 異なるNamespace間でも自由に通信可能
      - セキュリティリスクが高い状態

      ### NetworkPolicyによる制御
      - Pod間の通信を明示的に制御
      - 送信（Egress）と受信（Ingress）トラフィックの制御
      - ラベルセレクターによる柔軟な対象選択

      ## NetworkPolicyの基本概念

      ### ポリシータイプ
      - **Ingress** - Podへの着信通信を制御
      - **Egress** - Podからの発信通信を制御
      - 両方を組み合わせて使用可能

      ### セレクター
      - **podSelector** - 対象となるPodを選択
      - **namespaceSelector** - 対象となるNamespaceを選択
      - **ipBlock** - CIDR範囲でのIP制御

      ## EKSでのPodの通信制御

      EKSでは従来より Security Groups for Pods を使用してPodの通信を制御することができました。[セキュリティグループを個別の Pod に割り当てる](https://docs.aws.amazon.com/ja_jp/eks/latest/userguide/security-groups-for-pods.html)

      しかし、EKS Auto Modeではサポートされていません。[EKS 自動モードl での VPC ネットワーキングとロードバランシングの説明](https://docs.aws.amazon.com/ja_jp/eks/latest/userguide/auto-networking.html)

      代わりに EKS Auto Mode では Networkpolicy がサポートされています。[EKS Auto Mode でネットワークポリシーを使用する](https://docs.aws.amazon.com/ja_jp/eks/latest/userguide/auto-net-pol.html)

      # プラクティス
      - ネットワークポリシーコントローラーを有効にするConfigMapを作成する
        - コードは`eks/k8s`ディレクトリに格納
      - NetworkPolicyを使用したセキュリティ制御の実装
        - frontend はVPCのCIDRからのみアクセスを許可
        - backend は frontend からのみアクセスを許可

  - title: EKSのSecurity Groups for Podsによるセキュリティ制御
    body: |
      **本issueは内容を確認するだけでクローズしてください。**

      Security Groups for Podsは、AWS EKSにおいてPodレベルでネットワークセキュリティを制御する機能です。

      [セキュリティグループを個別の Pod に割り当てる](https://docs.aws.amazon.com/ja_jp/eks/latest/userguide/security-groups-for-pods.html)

      ## Security Groups for Podsの概要

      ### 従来の課題
      - Kubernetesのデフォルトでは、すべてのPod間通信が許可
      - ネットワークレベルでのセグメンテーションが困難
      - 細かなアクセス制御ができない

      ### Security Groups for Podsの利点
      - AWS Security Groupsの機能をPodレベルで適用
      - IPアドレス、ポート、プロトコルレベルでの制御
      - AWS VPCネットワーキングとの統合
      - 既存のAWSセキュリティ管理プロセスとの一貫性

      ### 注意
      - VPC CNIプラグインが必要
      - サポートされるEC2インスタンスタイプに制限があります。（`t`ファミリーはサポートされません）
      - EKS Auto Modeではサポートされていません

      ## Security Groupsの適用方法

      - VPC CNI(aws-node)に`ENABLE_POD_ENI=true`の環境変数を設定。[Amazon EKS Pod のセキュリティグループ用に Amazon VPC CNI Plugin for Kubernetes を設定する](https://docs.aws.amazon.com/ja_jp/eks/latest/userguide/security-groups-pods-deployment.html)
      - Pod用にセキュリティグループを作成します。
      - SecurityGroupPolicyリソースを作成し、Podに適用するセキュリティグループを指定します。
        - SecurityGroupPolicyリソースとPodを同時に作成するとPod起動に失敗する可能性があります。その時はPodを再作成すれば起動できます。

      # プラクティス
      本プラクティスでは EKS Auto Mode のため、Security Groups for Podsは使用できません。

  - title: Kubernetes RBACによるアクセス制御
    body: |
      Kubernetes RBAC（Role-Based Access Control）は、クラスタ内のK8sリソースへのアクセスを制御するセキュリティ機能です。ユーザーやサービスアカウントに対して、必要最小限の権限のみを付与することで、セキュリティリスクを最小化できます。

      [Using RBAC Authorization](https://kubernetes.io/docs/reference/access-authn-authz/rbac/)

      ## RBACの基本概念

      ### 主要なリソース
      - **Role** - Namespace内のリソースに対する権限を定義
      - **ClusterRole** - クラスタ全体のリソースに対する権限を定義
      - **RoleBinding** - RoleをユーザーやServiceAccountに紐付け
      - **ClusterRoleBinding** - ClusterRoleをユーザーやServiceAccountに紐付け

      ### APIGroups とリソースの指定
      
      RBACでは、対象となるKubernetesリソースをAPIGroupsとリソース名で指定します。主要なAPIGroupsは以下の通りです。

      - **""** (core group) - Pod、Service、ConfigMap、Secret など
      - **apps** - Deployment、DaemonSet、ReplicaSet など
      - **networking.k8s.io** - NetworkPolicy、Ingress など
      - **rbac.authorization.k8s.io** - Role、RoleBinding など
      - **apiextensions.k8s.io** - CustomResourceDefinition など

      利用可能なAPIGroupsとリソースは以下のコマンドで確認できます：
      ```bash
      # 全てのAPIリソースを表示
      kubectl api-resources
      ```

      ### ロールで設定する権限(verbs)の種類

      - **get** - リソースの取得
      - **list** - リソースの一覧表示
      - **create** - リソースの作成
      - **update/patch** - リソースの更新
      - **delete** - リソースの削除
      - **watch** - リソースの変更監視

      ## セキュリティのベストプラクティス

      ### 最小権限の原則
      - 必要な権限のみを付与
      - ワイルドカード（`*`）の使用を避ける

      ### ServiceAccountの管理
      - 用途別のServiceAccount作成
      - 不要なServiceAccountの削除

      # プラクティス

      時間による計画的な性能拡張を想定したCronJobを作成する。

      - CronJobを作成する
        - コードはcodes/frontend/k8sディレクトリに格納
        - スケールアウト用のCronJob
          - 時間は任意（スケールイン用の少なくとも2分前にする）
          - イメージは`bitnami/kubectl:latest`を使う
          - `kubectl patch deploy frontend -p '{"spec":{"replicas":3}}'`コマンドでフロントエンドのPod数を増やす
          - 任意のServiceAccountを指定
        - スケールイン用のCronJob
          - 基本的にスケールアウト用と同じ。時間とスケール数を変える
        - CronJob用のRBAC
          - ServiceAccount
          - Role
            - apps.deploymentsを"get", "list", "patch"する権限を持つ
          - RoleBinding

  - title: ReadOnlyRootFilesystemによるセキュリティ強化
    body: |
      ReadOnlyRootFilesystem設定は、コンテナのルートファイルシステムを読み取り専用にするセキュリティ機能です。この設定により、悪意のあるコードによるファイルシステムの改ざんやマルウェアの永続化を防止できます。

      [Configure a Security Context for a Pod or Container](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)

      ## ReadOnlyRootFilesystemの概要

      ### セキュリティ上の利点
      - ファイルシステムへの不正な書き込みを防止
      - マルウェアの永続化を阻止
      - 実行時のファイル改ざんを防止
      - アプリケーションの不正な設定変更を阻止

      ### 動作原理
      - コンテナのルートファイルシステム（/）を読み取り専用でマウント
      - /tmp、/var/tmp などの一時ディレクトリも読み取り専用になる
      - 書き込みが必要な場合は、別途ボリュームをマウントする必要がある

      ## 実装時の考慮点

      ### 一時ファイルの処理
      多くのアプリケーションは一時ファイルを作成する必要があります：
      - `/tmp` ディレクトリへの書き込み
      - ログファイルの出力
      - 設定ファイルの動的生成

      ### 解決策
      書き込みが必要な場合は、以下のボリュームタイプを使用：
      - **emptyDir** - Pod内で共有する一時領域
      - **tmpfs** - メモリベースの一時ファイルシステム
      - **PersistentVolume** - 永続化が必要なデータ

      # プラクティス
      - frontendとbackendにReadOnlyRootFilesystemを設定する
        - frontendは`/var/cache/nginx`と`/run`に書き込みが必要

  - title: 非rootユーザーでのPod実行によるセキュリティ強化
    body: |
      Podを非rootユーザーで実行することは、コンテナセキュリティの基本的なベストプラクティスです。rootユーザーでの実行は、セキュリティ侵害時の影響範囲を拡大させるリスクがあるため、必要最小限の権限で実行することが重要です。

      [Configure a Security Context for a Pod or Container](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)

      ## 非rootユーザー実行の概要

      ### セキュリティ上の利点
      - 権限昇格攻撃のリスクを軽減
      - システムファイルへの不正アクセスを防止
      - コンテナブレイクアウト時の影響範囲を制限
      - 最小権限の原則に従った実行環境の実現

      ### デフォルトの問題
      - 多くのコンテナイメージはrootユーザー（UID 0）で実行される
      - rootユーザーはシステム全体への強力な権限を持つ
      - セキュリティ侵害時の被害が拡大しやすい

      ## 実装方法

      ### SecurityContextの設定
      PodまたはContainerレベルでSecurityContextを設定：
      - **runAsNonRoot** - 非rootユーザーでの実行を強制
      - **runAsUser** - 実行するユーザーのUIDを指定
      - **runAsGroup** - 実行するグループのGIDを指定
      - **fsGroup** - ボリュームの所有グループを指定

      ## 実装時の考慮点

      - **ポート1024未満の使用** - 1024までは特権が必要なためアプリケーションを8080などの非特権ポートで実行
      - **ファイル権限** - fsGroupを使用してボリュームの権限を調整
      - **イメージの変更** - 非rootユーザーが無い場合はDockerfileでユーザーを作成・切り替え

      # プラクティス
      - frontendとbackendのPodを非root強制にし非rootで実行する
        - frontend
          - nginxイメージにはnginxユーザーおよびグループ(101:101)が既に存在します
          - Podの待ち受けポートを80から8080に変更する
            - nginx.confをconfigmapにして/etc/nginx/nginx.confにマウント
            - nginx.confに書かれたリッスンポートを80から8080に変更
            - その他、k8sマニフェストもポート変更（Serviceの公開ポートは80のままで良い）
        - backend
          - nodeイメージにはnodeユーザーおよびグループ(1000:1000)が既に存在します

  - title: allowPrivilegeEscalationによる特権昇格の防止
    body: |
      allowPrivilegeEscalation設定は、コンテナ内プロセスが実行時に親プロセスより多くの特権を取得することを防ぐセキュリティ機能です。この設定により、setuidバイナリやsudoコマンドによる特権昇格攻撃を防止できます。

      [Configure a Security Context for a Pod or Container](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)

      ## 特権昇格の概要

      ### 特権昇格の仕組み
      - プロセスが実行時により多くの権限を取得する仕組み
      - setuidビット付きバイナリの実行時に権限が昇格
      - sudoコマンドによる一時的な権限昇格
      - 攻撃者が悪用する可能性のあるメカニズム

      ### セキュリティリスク
      - コンテナブレイクアウトのリスク増大
      - システム権限の不正取得
      - ホストシステムへの影響拡大
      - マルウェアによる権限昇格攻撃

      ## allowPrivilegeEscalationの動作

      ### false設定時の効果
      - setuidバイナリが特権を取得できない
      - sudoコマンドが実行されても権限が昇格しない
      - プロセスは起動時の権限レベルを維持
      - 特権昇格攻撃を根本的に防止

      ### デフォルト動作
      - allowPrivilegeEscalationのデフォルト値はtrue
      - runAsNonRoot: trueが設定されている場合は自動的にfalseになる
      - 明示的にfalseを設定することが推奨

      # プラクティス
      - frontendとbackendのSecurityContextに特権昇格防止の設定を追加する

  - title: 特権のはく奪（Capability Drop）によるセキュリティ強化
    body: |
      Linux Capabilitiesは、従来のroot権限を細分化し、プロセスに必要最小限の権限のみを付与する仕組みです。コンテナ実行時に不要な特権を削除（drop）することで、セキュリティリスクを大幅に軽減できます。

      [Configure a Security Context for a Pod or Container](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)

      ## Linux Capabilitiesの概要

      ### 従来のroot権限の問題
      - root権限は「全てか無か」の権限モデル
      - 必要以上に強力な権限を付与してしまう
      - セキュリティ侵害時の影響が甚大
      - 最小権限の原則に反する

      ### Capabilitiesによる権限の細分化
      - root権限を個別の機能単位に分割
      - プロセスに必要な権限のみを付与
      - 不要な権限は削除（drop）して攻撃面を縮小
      - より細かなセキュリティ制御が可能

      ## 主要なLinux Capabilities

      ### ネットワーク関連
      - **CAP_NET_BIND_SERVICE** - 1024未満のポートでのバインド
      - **CAP_NET_RAW** - RAWソケットの作成
      - **CAP_NET_ADMIN** - ネットワーク設定の変更

      ### ファイルシステム関連
      - **CAP_DAC_OVERRIDE** - ファイル権限の無視
      - **CAP_FOWNER** - ファイル所有者権限の無視
      - **CAP_CHOWN** - ファイル所有者の変更

      ### システム管理関連
      - **CAP_SYS_ADMIN** - システム管理操作（非常に強力）
      - **CAP_SYS_TIME** - システム時刻の変更
      - **CAP_KILL** - 他プロセスへのシグナル送信

      ## containerdのデフォルトCapabilities

      EKS AutoMode では、containerd を使用してコンテナを実行します。containerd のデフォルトCapabilitiesは以下の通りです。

      - CAP_CHOWN
      - CAP_DAC_OVERRIDE
      - CAP_FSETID
      - CAP_FOWNER
      - CAP_MKNOD
      - CAP_NET_RAW
      - CAP_SETGID
      - CAP_SETUID
      - CAP_SETFCAP
      - CAP_SETPCAP
      - CAP_NET_BIND_SERVICE
      - CAP_SYS_CHROOT
      - CAP_KILL
      - CAP_AUDIT_WRITE

      [containerd/pkg/oci/spec.go · containerd/containerd](https://github.com/containerd/containerd/blob/1117f663e77d662b02cec530a03310ed91b1d18b/pkg/oci/spec.go#L118)

      ## 特権のはく奪戦略

      ### ALL権限の削除
      最も安全なアプローチは、すべての特権を削除することです：
      ```yaml
      securityContext:
        capabilities:
          drop:
            - ALL
      ```

      ### 必要に応じた権限の追加
      削除後、アプリケーションに必要な最小限の権限のみを追加：
      ```yaml
      securityContext:
        capabilities:
          drop:
            - ALL
          add:
            - NET_BIND_SERVICE  # 必要な場合のみ
      ```

      # プラクティス
      - frontendとbackendのSecurityContextで特権をすべてはく奪する

  - title: Seccompプロファイルによるシステムコール制限
    body: |
      Seccomp（Secure Computing）は、コンテナが実行できるシステムコールを制限することで、攻撃面を大幅に削減するLinuxセキュリティ機能です。コンテナのランタイムセキュリティを向上させ、潜在的な脆弱性の悪用を防ぐことができます。

      # Seccompの必要性
      - コンテナは通常、必要以上に多くのシステムコールにアクセス可能
      - 悪意のあるプロセスがシステムコールを通じてホストシステムを攻撃する可能性
      - 脆弱性の悪用によるコンテナエスケープのリスク軽減
      - 最小権限の原則に従ったセキュアなコンテナ実行環境の実現

      # 解決策
      - デフォルトSeccompプロファイル（RuntimeDefault）の適用
        - コンテナランタイムが提供する安全なデフォルトプロファイルを使用
        - 一般的なワークロードに適した制限を自動的に適用
      - カスタムSeccompプロファイルの作成
        - アプリケーション固有の要件に合わせたプロファイル作成
        - より厳格な制限やアプリケーション特有のシステムコールの許可

      本プラクティスでは RuntimeDefault プロファイルを採用します。これにより、コンテナランタイムが提供する適切なデフォルト制限を適用し、セキュリティを向上させることができます。

      # Seccompの動作原理
      - システムコールを傍受し、許可されたもののみを通す
      - ブロックリスト方式ではなく、アローリスト方式でより安全
      - Linuxカーネルの機能としてオーバーヘッドが非常に少ない
      - コンテナランタイム（containerd/Docker）がデフォルトプロファイルを提供

      ## RuntimeDefaultプロファイル
      - コンテナランタイムが提供するデフォルトのSeccompプロファイル
      - 一般的なアプリケーションに必要なシステムコールのみを許可
      - 危険なシステムコール（reboot、mount等）をブロック
      - 設定が簡単で多くのワークロードで利用可能
      - EKS Automodeのノードはcontainerdを使用しているため、デフォルトのSeccompプロファイルは次の内容 [seccomp_default.go](https://github.com/containerd/containerd/blob/main/contrib/seccomp/seccomp_default.go)

      ## Kubernetesでの設定方法
      PodレベルまたはコンテナレベルのSecurityContextで以下のように設定：
      ```yaml
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      ```

      Podレベルとコンテナレベルの両方を設定した場合、コンテナレベルの設定が優先されます。

      # プラクティス
      - frontendとbackendのPodにSeccompプロファイルを設定する
        - SecurityContextに `seccompProfile: type: RuntimeDefault` を追加
        - 設定後、Podが正常に起動し動作することを確認する

      ## 更に発展的なプラクティス
      このプラクティスは余裕がなければやらなくてもいいです。

      - カスタムSeccompプロファイルの作成と適用
        - Security Profiles Operatorを使用してアプリケーション固有のプロファイルを生成
        - 生成されたプロファイルをPodに適用し、より厳格な制限を実現

  - title: SELinuxによるファイルアクセスの制限
    body: |
      **本issueは内容を確認するだけでクローズしてください。**

      SELinux（Security-Enhanced Linux）は、Linuxカーネルのセキュリティモジュールです。ユーザーやプロセスがアクセスできるファイルを制御できます。

      ## SELinuxの概要

      従来のアクセス制御（DAC）ではファイルやディレクトリに設定したパーミッションに基づく制限でした。しかし、rootユーザーは全てのリソースにアクセスできるため、セキュリティ上のリスクが高いです。

      SELinuxは強制アクセス制御（MAC）を提供し、ポリシーで明示的に許可されたアクセスのみを許可することで、システム全体のセキュリティを強化します。プロセスやファイルにはセキュリティコンテキストが付与され、アクセスはそのポリシーに基づいて制御されます。rootユーザーもこのポリシーに従う必要があります。

      ## SELinuxの動作モード

      ### Enforcing（強制モード）
      - SELinuxポリシーを強制的に適用
      - ポリシー違反をブロックし、ログに記録
      - 本番環境で推奨されるモード

      ### Permissive（許可モード）
      - ポリシー違反をログに記録するが、ブロックしない
      - ポリシーのテストや調整に使用
      - 移行期間やトラブルシューティングに適している

      ### Disabled（無効モード）
      - SELinuxが完全に無効
      - 従来のDACのみが適用される

      ## Kubernetesクラスタでの活用

      - ワーカーノード
        - EKS Automode のワーカーノードはデフォルトでSELinuxがEnforcingモードで有効 [EKS Auto Mode を使用してクラスターインフラストラクチャを自動化する - Amazon EKS](https://docs.aws.amazon.com/ja_jp/eks/latest/userguide/automode.html)
      - Pod
        - ノードでSELinuxが有効な場合、PodのSecurityContextでSELinuxオプションを設定可能
          - オプション指定しなくてもコンテナランタイムにより一意なコンテキストが割り振られ、コンテナ内のファイルのみアクセスできるように制限される [Kubernetes API Reference Docs](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.33/#securitycontext-v1-core)
          - EKS Automode (Bottleroket)ではすべての非特権Podに`container_t`タイプのラベルが自動的に付与されコンテナ実行ユーザーがrootでもアクションが制限される[Bottlerocket のセキュリティ機能 〜オープンソースの Linux ベースオペレーティングシステム〜 | Amazon Web Services ブログ](https://aws.amazon.com/jp/blogs/news/security-features-of-bottlerocket-an-open-source-linux-based-operating-system/)

  - title: 信頼できるベースイメージの選定
    body: |
      コンテナイメージのベースイメージ選定は、セキュリティと運用性の両面で重要な判断です。適切なベースイメージを選ぶことで、脆弱性のリスクを最小化し、安全なコンテナ環境を構築できます。

      ## ベースイメージ選定における考慮事項

      ### セキュリティ観点
      - **攻撃面の最小化** - 不要なパッケージやサービスが含まれていないイメージを選択
      - **脆弱性の少なさ** - 定期的にセキュリティパッチが適用されているイメージ
      - **セキュリティサポート期間** - 長期間サポートが提供されるイメージ
      - **信頼できる提供元** - 公式または検証済みのイメージ提供者

      ### 運用観点
      - **イメージサイズ** - 小さなイメージほどダウンロード時間や攻撃面が小さい
      - **アップデート頻度** - 定期的に更新されているか
      - **コミュニティサポート** - 十分なユーザーコミュニティとドキュメント

      ## 主要なベースイメージの比較

      - **Alpine Linux** - 軽量・セキュリティ重視だがglibc非対応で互換性に注意。
      - **Ubuntu** - 互換性・パッケージが豊富だがイメージサイズは大きい。
      - **Debian** - 安定性・セキュリティ重視だが最新パッケージ導入は遅い。
      - **Red Hat UBI** - エンタープライズ向けで商用サポートありだが利用範囲は限定的。
      - **Distroless** - 攻撃面を最小化するがデバッグや運用性に制約がある。

      ## タグの違い

      DockerHubでイメージを検索すると同じイメージでも複数のタグが存在します。タグはイメージのバージョンや特性を示します。

      - **latest** - 最新版だが、予期しない更新が含まれる可能性があるため使用は推奨されない。
      - **バージョン指定** - 具体的なバージョンを指定することで、安定性と予測可能性を確保。
      - **軽量版** - `-slim`や`-alpine`などのタグは、不要なパッケージを省いた軽量イメージ。

      ## ベストプラクティス

      ### イメージ選定指針
      - **公式イメージを優先** - Docker Hub公式やソフトウェアベンダー公式
      - **定期的な更新** - 頻繁にメンテナンスが行われ、最新のセキュリティパッチが適用されたイメージを使用
      - **タグの明示** - `latest`タグではなく具体的なバージョンを指定
      - **軽量版の検討** - 互換性問題がない場合はAlpineやslimeを選択

      ### 継続的な見直し
      - 定期的な脆弱性スキャンの実施
      - ベースイメージのセキュリティアップデート追跡
      - イメージサイズとセキュリティのバランス評価

      # プラクティス
      - Backendのベースイメージを軽量版のイメージに変える
        - DockerHubでnodeのイメージを検索し、さらにタグを`18`で絞る
        - 18系で軽量なイメージを選定しDockerfileを更新する
        - アプリケーションも更新したことが分かる用にindex.jsの表示文字列を更新する

  - title: 信頼できる提供元のコンテナイメージの使用
    body: |
      **本issueは内容を確認するだけでクローズしてください。**

      クラスタで動かすコンテナイメージは、信頼できる提供元から取得することが重要です。悪意のあるイメージや脆弱なイメージを使用すると、セキュリティリスクが高まります。

      ## コンテナイメージのセキュリティリスク

      - 攻撃者が悪意のあるコンテナイメージをクラスタで実行する
      - 開発目的等で意図せず脆弱なイメージを使用してしまう

      ## 信頼できるイメージ提供元

      ### 公式イメージの使用
      - **Docker Hub公式イメージ** - Dockerが維持管理する認証済みイメージ
      - **ディストリビューション公式** - Ubuntu、Alpine、CentOS等の公式イメージ
      - **ソフトウェアベンダー公式** - nginx、node、redis等の公式イメージ

      ### 検証済みレジストリ
      - **AWS ECR Public Gallery** - AWSが管理する公開レジストリ
      - **Google Container Registry** - Googleが提供するイメージ
      - **Red Hat Container Catalog** - Red Hatの認証済みイメージ
      - 自身で管理しているプライベートなレジストリ

      ## 対策

      - kyverno等のポリシーエンジンをK8sに導入し、信頼できるレジストリからのイメージのみ実行を許可する (kyvernoの導入は別のissueで行います)

  - title: イメージスキャンによる脆弱性検査
    body: |
      コンテナイメージのスキャンを行うことでコンテナイメージに含まれる既知の脆弱性を検出できます。

      ## イメージスキャンの必要性

      - コンテナイメージは多くのライブラリや依存関係を含むため、脆弱性が存在する可能性がある
      - 脆弱性のあるイメージを使用すると、セキュリティリスクが高まる
      - 定期的なスキャンにより、新たな脆弱性を早期に検出し、対応することが重要

      ## イメージスキャンの方法

      - レジストリの機能 (ECR、Docker Hub等) を使用して自動スキャン
      - スキャンツール（Trivy等）を使用して手動スキャン（CIに組み込んで自動化することが多い）

      ## ECRイメージスキャンの概要

      - [基本スキャン（Basic Scan）](https://docs.aws.amazon.com/ja_jp/AmazonECR/latest/userguide/image-scanning-basic.html)
      - [拡張スキャン（Enhanced Scan）](https://docs.aws.amazon.com/ja_jp/AmazonECR/latest/userguide/image-scanning-enhanced.html)

      ### 基本スキャン

      無料で使える。AWSネイティブのスキャン(推奨)と Clair 使用したスキャン(非推奨)がある。OSパッケージのみ。プッシュ時またはオンデマンドでスキャン可能。

      ### 拡張スキャン

      有償。Amazon Inspector を使用した高度な脆弱性検査。OSパッケージに加え、アプリケーションパッケージも検査可能。イメージプッシュ時と自動連続スキャン（脆弱性DBが更新されるたび）が可能。

      ## 脆弱性の分類

      ECRイメージスキャンでは、検出された脆弱性を以下の重要度で分類します：

      ### 重要度レベル
      - **CRITICAL** - 緊急対応が必要な重大な脆弱性
      - **HIGH** - 高優先度で対応すべき脆弱性
      - **MEDIUM** - 中程度の脆弱性
      - **LOW** - 軽微な脆弱性
      - **INFORMATIONAL** - 情報提供レベル

      ## 脆弱性発見時の対応

      - ベースイメージやパッケージを最新版に更新してイメージを再ビルド
        - 脆弱性の数が多い場合、ベースイメージの変更を検討
      - 修正後は再スキャンで脆弱性が解消されたことを確認してからデプロイ

      # プラクティス
      - ECRレポジトリに基本イメージスキャンを設定する
        - ECRモジュールを拡張し、プッシュ時に基本スキャン（Basic Scan）を実行
        - backendまたはfrontendのイメージをビルドしてECRにプッシュ。プッシュ時にスキャンが実行されることを確認する

  - title: マルチステージビルドによるイメージサイズとセキュリティの最適化
    body: |
      **本issueは内容を確認するだけでクローズしてください。**

      マルチステージビルドは、最終的なコンテナイメージからビルド時のみ必要なツールやファイルを除外することで、イメージサイズの縮小とセキュリティリスクの軽減を実現するDockerの機能です。

      [Use multi-stage builds](https://docs.docker.com/build/building/multi-stage/)

      ## マルチステージビルドの概要

      ### マルチステージビルドの利点
      - **イメージサイズの削減** - 必要なファイルのみを最終イメージに含める
      - **セキュリティリスクの軽減** - ビルドツールや開発用パッケージを除外
      - **実行環境の最適化** - 軽量なベースイメージでランタイム環境を構築
      - **ビルドキャッシュの効率化** - ステージごとのレイヤーキャッシュを利用

      ## マルチステージビルドの基本構造

      実はfrontendのDockerfileはすでにマルチステージビルドを使用しています。以下のように、ビルドステージとランタイムステージを分けています。

      **ビルドステージ（Build Stage）**
      ```dockerfile
      FROM node:18 as build
      WORKDIR /app
      COPY package*.json ./
      RUN npm install
      COPY . .
      RUN npm run build
      ```

      **ランタイムステージ（Runtime Stage）**
      ```dockerfile
      FROM nginx:alpine
      COPY --from=build /app/build /usr/share/nginx/html
      ```

      ビルドステージでビルドした成果物が`/app/build`に格納され、ランタイムステージで`/usr/share/nginx/html`配下にコピーしています。これにより、最終イメージにはビルドツールやソースコードが含まれず、軽量なイメージが生成されます。

  - title: ECRレポジトリのアクセス制限とセキュリティ設定
    body: |
      Amazon ECR（Elastic Container Registry）のアクセス制限を適切に設定することで、コンテナイメージへの不正アクセスを防止し、セキュリティを向上させることができます。

      [Amazon ECR でのリポジトリポリシーの例](https://docs.aws.amazon.com/ja_jp/AmazonECR/latest/userguide/repository-policy-examples.html)

      ## ECRのセキュリティの重要性
      - コンテナイメージはアプリケーションの実行環境を構成する重要な要素
      - 不正なイメージがプッシュされると、セキュリティリスクが高まる
      - 適切なアクセス制限を設けることで、信頼できるユーザーのみがイメージをプッシュ・プルできるようにする

      ## ECRアクセス制限の概要

      ### リポジトリポリシーによる制御
      - **特定のIAMユーザー/ロールのみアクセス許可**
      - **特定のAWSアカウントからのアクセス制御**
      - **読み取り専用/読み書き権限の分離**
      - **IPアドレスベースのアクセス制限**

      # プラクティス
      - ECRリポジトリのアクセス制限を設定する
        - ECRモジュールを拡張してリポジトリポリシーを設定
          - CI/CD用のIAMロールにプッシュ権限を付与
          - EKSワーカーノードのIAMロールにプル権限のみ付与
          - 他のAWSアカウントからのアクセスを拒否

  - title: SOPSを使ったK8s Secretの暗号化
    body: |
      SOPS（Secrets OPerationS）は、機密情報を暗号化してGitリポジトリに安全に保存するためのツールです。KubernetesのSecretリソースを暗号化して管理することで、設定ファイルの機密性を保ちながらInfrastructure as Codeの運用を実現できます。

      [mozilla/sops: Simple and flexible tool for managing secrets](https://github.com/mozilla/sops)

      ## K8s Secret管理の課題
      - Secretをプレーンテキストで保存するセキュリティリスク
      - 設定の共有とバージョン管理の困難さ
      - GitリポジトリにSecretをコミットできない問題

      ## 課題の解決策
      - External Secret: AWS Secrets Managerなどの外部ストアにある機密情報を、クラスター内のネイティブなKubernetes Secretリソースへと同期し続けるオペレーター
      - Shield Secret: 公開鍵を使って誰でも安全に暗号化できるSealedSecretリソースをGitに保存し、クラスター内のコントローラーだけが持つ秘密鍵で復号するツール
      - vals: 設定ファイル内にref://形式で記述された機密情報の参照を、デプロイ実行時にVaultやAWSなど多様なバックエンドから取得して解決（置換）するCLIツール
      - SOPS: YAMLやJSONファイル内の機密情報（バリュー）をKMSやPGPキーで直接暗号化し、ファイル全体を安全にGit管理するためのCLIツール

      ## SOPSの概要
      - **SOPS**はYAML/JSONファイルの値を暗号化するCLIツール
      - **KMSやPGPキー**を使用して暗号化
      - YAML/JSONの値のみを暗号化し、構造は可読性を保持
      - **暗号化されたファイルをGitで管理** - 機密情報を安全にバージョン管理

      ## SOPSによる暗号化手順
      - (事前準備) KMS等の暗号化キーを用意
      - SOPSコマンドを使用してSecretマニフェストを暗号化
      - デプロイ時にSOPSコマンドで復号化してKubernetesに適用

      ## SOPSのKubernetes統合
      - CLIツールで毎回手動で暗号化・復号化するのは面倒
      - KustomizeやHelmと組み合わせて使用可能
        - Kustomize: [ksops](https://github.com/viaduct-ai/kustomize-sops)
        - Helm: [helm-secrets](https://github.com/jkroepke/helm-secrets)
      - ArgoCDにもksopsを統合することが可能だが拡張が必要
        - [Argo CD Integration](https://github.com/viaduct-ai/kustomize-sops?tab=readme-ov-file#argo-cd-integration-)

      # プラクティス
      - SOPS用のKMSキーを作成（別issue、Terraformにおける機密情報の管理で作成済なら不要）
        - KMSのTerraformコードは`codes/sops/terraform`に配置
        - KMSキーにアクセスできるIAMユーザーを制限する
        - プロジェクトのrootに`.sops.yaml`を作成し、作成したKMSキーで暗号化する設定をする
      - SOPSを使用したSecret暗号化の実装
        - 適当なKey/ValueをもったSecretのマニフェストを作成
        - SOPSを使用してSecretマニフェストを暗号化（デプロイはしなくていいです）

  - title: ArgoCDにKSOPSを組み込む
    body: |
      ArgoCDにKSOPS（Kustomize SOPS）を組み込むことで、SOPS暗号化されたKubernetesのSecretリソースを安全にGitOpsワークフローで管理できます。暗号化された機密情報をGitリポジトリに保存しながら、ArgoCDが自動的に復号化してクラスタにデプロイできるようになります。

      # 課題や必要性
      - GitOpsワークフローでSecretを管理する際の機密性確保
      - 暗号化されたSecretの自動復号化とデプロイ
      - 開発・ステージング・本番環境での一貫したSecret管理
      - CI/CDパイプラインでの手動復号化作業の削減

      # 解決策
      - KSOPS統合によるSOPS暗号化Secretの自動復号化
        - ArgoCDのrepo-serverにKSOPSプラグインを組み込む
        - SOPS暗号化されたYAMLファイルの透過的な復号化
        - Kustomizeとの統合による柔軟な設定管理
      - External Secrets Operatorによる外部シークレット管理
      - Sealed Secretsによる暗号化Secret管理

      本プラクティスではKSOPSを採用します。既存のSOPSワークフローを活用しつつ、ArgoCDとの統合により完全に自動化されたGitOpsワークフローを実現できるためです。

      # 解決策の説明
      KSOPSはKustomizeの機能を拡張するプラグインで、SOPS暗号化されたファイルを透過的に復号化します。

      ## KSOPS の動作原理
      - **Kustomize統合** - KustomizeのGenerator機能を使用してSOPS復号化を実行
      - **透過的復号化** - ビルド時にSOPS暗号化ファイルを自動復号化
      - **KMS統合** - AWS KMSキーを使用した暗号化・復号化
      - **権限管理** - ArgoCDのサービスアカウントにKMSアクセス権限を付与

      実装手順：
      - SOPS暗号化されたSecretファイルをGitリポジトリに保存
      - KustomizationでsecretGeneratorとしてKSOPSを設定
      - ArgoCDのrepo-serverをKSOPS対応版にアップグレード
      - Pod IdentityでArgoCDサービスアカウントにKMS権限を付与

      # プラクティス
      
      - KSOPSをArgoCDに組み込む
        - KSOPSに対応したArgoCDの設定
          - [公式リポジトリ](https://github.com/viaduct-ai/kustomize-sops)を参考にArgoCDのrepo-serverをKSOPS対応版にアップグレード
            - KSOPSだけでなくSOPSもインストールする
            - ArgoCDのConfigmapを修正しKustomizeプライグインを有効化する
        - Pod IdentityでArgoCDのrepo-serverにKMS権限を付与
          - SAは`argocd-repo-server`
          - 権限は`kms:DescribeKey`と`kms:Decrypt`が最低限ついていればいい
        - KMSキーのリソースベースポリシーでArgoCDのrepo-serverからの操作を許可する
        - SOPS暗号化Secretの作成とKustomization設定
          - プロジェクトルートに`.sops.yaml`を作成し、KMSキーで暗号化する設定をする
          - FrontendまたはBackendに任意のSecretマニフェストを作成してSOPSで暗号化
          - kustomization.yamlでsecretGeneratorとしてKSOPSを設定
            ```yaml
            generators:
            - ksops.yaml
            ```
          - ksops-generator.yamlを作成してSOPS暗号化ファイルを指定
            ```yaml
            apiVersion: viaduct.ai/v1
            kind: ksops
            metadata:
              name: ksops
              annotations:
                config.kubernetes.io/function: |
                    exec:
                      # if the binary is in your PATH, you can do
                      path: ksops
                      # otherwise, path should be relative to manifest files, like
                      # path: ../../../ksops
            files:
              - secret.yaml
            ```
      - 動作確認
        - ブランチをプッシュしSOPSで暗号化されたマニフェストがArgoCDで復号化されデプロイされること
          - 動作確認のためArgoCDのApplication設定で同期ブランチを作業ブランチに変えてもいい
  - title: Terraformにおける機密情報の管理
    body: |
      Terraformでは、機密情報を安全に管理するために注意が必要です。

      ## Terraformでの機密情報
      - コードに機密情報をベタ書きにしてしまうとGitにコミットした際に漏洩するリスクがある
      - tfstateに機密情報を含む設定した値が書かれる

      ## 対策方法

      - コードの機密情報の対策
        - コードに書く機密情報はダミー値を使いignore_changesにしてデプロイする。運用で使う値は別途マネージメントコンソール等で変更する
        - Secret Manager等の外部ストアを使用して機密情報を管理する。コードではdataを使い値を参照する
        - SOPS等の暗号化ツールを使い値を暗号化。コードではdataを使い値を参照する
      - tfstateの機密情報の対策
        - tfstateへのアクセスを制限する

      本プラクティスでは、SOPSを使用した機密情報の暗号化とtfstateへのアクセス制限を行います。

      ## SOPSの概要
      - **SOPS**はYAML/JSONファイルの値を暗号化するCLIツール
      - **KMSやPGPキー**を使用して暗号化
      - YAML/JSONの値のみを暗号化し、構造は可読性を保持
      - **暗号化されたファイルをGitで管理** - 機密情報を安全にバージョン管理

      ## SOPSによる暗号化手順
      - (事前準備) KMS等の暗号化キーを用意
      - SOPSコマンドを使用して機密情報を含むファイルを暗号化
      - TerraformはSOPSプロバイダーを使い暗号化されたファイルをdataで参照

      ## SOPSのTerraform統合
      - Terraformには[SOPS](https://registry.terraform.io/providers/carlpett/sops/latest/docs)プロバイダーがある
      - Terraform実行時にSOPSプロバイダーが暗号化されたファイルを復号化し、値を参照できるようにする

      # プラクティス
      - SOPS用のKMSキーを作成（別issue、SOPSを使ったK8s Secretの暗号化で作成済なら不要）
        - KMSのTerraformコードは`codes/sops/terraform`に配置
        - KMSキーにアクセスできるIAMユーザーを制限する
        - プロジェクトのrootに`.sops.yaml`を作成し、作成したKMSキーで暗号化する設定をする
      - SOPSを使用した機密情報の暗号化の実装
        - 適当なKey/Valueをもったyamlファイルを`codes/sops/terraform`に作成
        - SOPSでそのyamlファイルを暗号化
        - `codes/sops/terraform`にSecretManagerのTerraformコードを作成
          - SecretManagerに保管する値はSOPSで暗号化した値を参照する
      - tfbackendモジュールを改良しS3バケットにアクセスできるIAMユーザーを制限する
  - title: ノードの暗号化
    body: |
      EKSのノードは一時的なものとして使うことが多いですが、一時的に機密情報を格納することもあります。そのため、ノードの暗号化を行うことで、機密情報の漏洩リスクを低減できます。

      # ノードの暗号化の必要性
      - ノードのEBSボリュームに機密情報が格納されることがある
      - 物理的な不正アクセスにより、機密情報が漏洩するリスクがある
      - ノードのEBSボリュームを暗号化することで、機密情報の漏洩リスクを低減できる 
      
      # 解決策
      - EBSデフォルトの暗号化を有効にし、新規に作成されるEBSボリュームを自動的に暗号化する
      - （Fargate、EKS AutoModeの場合）ノードディスクはデフォルトで暗号化される
      
      本プラクティスでは EKS AutoMode におけるノードの暗号化を確認します。

      # EKS AutoModeのノード暗号化
      - EKS AutoModeでは、ノードのEBSボリュームがデフォルトで暗号化される
      - 暗号化はAWS KMSを使用して行われ、デフォルトではAWSマネージドの`aws/ebs`キーが使用される
      - `nodeclass`リソースの`spec.ephemeralStorage.kmsKeyID`で任意のKMSキーを指定することも可能
      
      # プラクティス
      
      - EKS AutoModeのノード暗号化を確認する
        - EKS AutoModeのワーカーノードを確認し、EBSボリュームが`aws/ebs`キーで暗号化されていることを確認する

      ## 更に発展的なプラクティス
      このプラクティスは余裕がなければやらなくてもいいです。

      CMKを使いノードのEBSボリュームを暗号化する。
      新規にnodeclassおよびnodepoolを作成し、ノードのEBSボリュームをカスタマーKMSキーで暗号化する。

      - ノード暗号化用のカスタマーKMSキーを作成する
      - `nodeClass`および`nodePool`を新たに作成する
        - `nodeClass`の`spec.ephemeralStorage.kmsKeyID`にカスタマーKMSキーを指定する
        - `nodePool`にはノードに任意のラベルを付与する
      - 作成し`nodePool`でPodを起動させる。nodeSelector等でノードに付与した任意のラベルを指定するといい
      - 作成されたノードを確認しEBSがCMKで暗号化されていることを確認する

  - title: ServiceMeshによるPod間通信の暗号化（mTLS）
    body: |
      Service Mesh（サービスメッシュ）を使用してマイクロサービス間の通信にmTLS（相互TLS）認証を実装することで、Pod間通信のセキュリティを大幅に向上させることができます。

      # 課題や必要性
      - Kubernetes内のPod間通信はデフォルトで暗号化されておらず、通信内容の盗聴リスクがある
      - サービス間の認証・認可の仕組みがなく、なりすましの可能性がある
      - ネットワークレベルでの通信制御や可観測性が不十分
      - セキュリティポリシーの一元管理が困難

      # 解決策
      - Istio Service MeshによるmTLS実装
        - サイドカープロキシパターンでの実装
        - Ambient Meshモードでの実装（より軽量）
      - Linkerd Service Meshによる実装
      - Consul Connect による実装
      
      本プラクティスでは Istio の Ambient モードを採用します。従来のサイドカーモードと比較してリソース効率が良く、既存のアプリケーションを変更することなく透過的にmTLSを実装できるためです。

      # 解決策の説明
      Istio Ambient モードは、各ノードでztunnelプロキシが動作し、Pod間通信を透過的に傍受してmTLS暗号化を行います。
      - IstiodがCA（Certificate Authority）として動作し、SPIFFE証明書を管理
      - ztunnelが各ノードでL4プロキシとして動作し、mTLS terminationを実行
      - アプリケーションのコード変更やサイドカー注入が不要
      - 必要に応じてwaypoint proxyでL7レベルの制御も可能

      実装手順：
      - IstioのAmbient モードをEKSクラスタにインストール
      - 対象のNamespaceをAmbient meshに追加

      # プラクティス
      - IstioのAmbient モードをEKSクラスタに導入する [Istio / Install with Helm](https://istio.io/latest/docs/ambient/install/helm/)
        - Helmを使用してIstioの各コンポーネントをインストールする
          - istio-base（CRD等の基盤）
          - istiod（制御プレーン）
          - istio-cni（ネットワーク設定）
          - ztunnel（データプレーン）
      - frontendとbackendのNamespaceをAmbient meshに追加する
        - readiness/liveness ProbeとNetworkPolicyを設定しているとProbeに失敗する可能性あり。その場合は問題を解決する

      ## 更に発展的なプラクティス
      このプラクティスは余裕がなければやらなくてもいいです。

      - PrometheusとKialiを導入しmTLSで暗号化された通信の可視化をする [Istio / Secure and visualize the application](https://istio.io/latest/docs/ambient/getting-started/secure-and-visualize/)

  - title: Falcoによるランタイムセキュリティ監視
    body: |
      Falco は、CNCF（Cloud Native Computing Foundation）にホストされているOSSで、コンテナやKubernetesクラスタの異常な挙動をリアルタイムに検知するためのランタイムセキュリティエンジンです。

      [Falco公式ドキュメント](https://falco.org/docs/)

      ## Falcoの必要性

      - Kubernetesのデフォルト設定では多くの通信が許可されている
      - 静的なセキュリティ設定だけでは実行時の脅威を検出できない
      - コンテナブレイクアウトや特権昇格などの動的な攻撃への対応が必要

      ## Falcoで検出できる脅威

      Falcoは以下のようなセキュリティ脅威を検出できます。

      - **ファイルシステム攻撃**: システムファイルの不正な読み書き、設定ファイル改ざん
      - **プロセス異常**: 予期しないバイナリ実行、シェルスクリプトの異常実行

      他にもさまざまな脅威を検出可能です。Falcoがデフォルトで監視するルールは以下のリンクから確認できます。

      [Default Rules | Falco](https://falco.org/docs/reference/rules/default-rules/)

      ## FalcoのKubernetes統合

      ### Falcoの動作
      - ノードのシステムコールをドライバーを使って監視
        - EKS Automode のノードの場合は`Modern eBPF`を使用

      ### DaemonSet配置
      - 各ノードでカーネルイベントを監視するためDaemonSetとして配置
      - 全てのワーカーノードでのセキュリティ監視を実現
      - ノードレベルでのシステムコール監視

      ### 権限要件
      - カーネルアクセスのため**特権モード**での実行が必要
      - セキュリティコンテキストでの適切な権限設定
      - ホストのプロセスファイルシステムへのアクセス

      # プラクティス
      - FalcoをEKSクラスタに導入する
        - Helmチャートを使用してFalcoをインストール [Falcoをデプロイする | KubernetesでFalcoを試す](https://falco.org/docs/getting-started/falco-kubernetes-quickstart/#deploy-falco)
      - 動作確認のためbackendまたはfrontendでルールをトリガーする。Falcoのログに疑わしい挙動が出力されることを確認する [ルールをトリガーする | KubernetesでFalcoを試す](https://falco.org/docs/getting-started/falco-kubernetes-quickstart/#trigger-a-rule)

      # 発展的なプラクティス
      このプラクティスは余裕がなければやらなくてもいいです。

      - カスタムルールの作成
        - アプリケーション固有のセキュリティルール作成
        - ルールの優先度とノイズ対策の設定

  - title: GuardDuty EKS Protectionの有効化とセキュリティ監視
    body: |
      Amazon GuardDutyは、AWSアカウントおよびワークロードを脅威から保護するためのマネージド型脅威検出サービスです。EKSの脅威も検出可能です。

      [Amazon GuardDuty](https://docs.aws.amazon.com/ja_jp/guardduty/latest/ug/what-is-guardduty.html)

      ## EKS に関連したGuardDutyの機能

      - [EKS Protection](https://docs.aws.amazon.com/ja_jp/guardduty/latest/ug/kubernetes-protection.html)
      - [Runtime Monitoring](https://docs.aws.amazon.com/ja_jp/guardduty/latest/ug/runtime-monitoring.html)
      - [Malware Protection for EC2](https://docs.aws.amazon.com/ja_jp/guardduty/latest/ug/malware-protection.html)

      ### EKS Protection

      EKSクラスタの脅威を検出するための機能です。EKSの監査ログを使い、不正な操作を検出します。

      EKS Protection はアカウント単位で機能を有効または無効にします。

      以下の脅威を検出します。

      [EKS Protection の検出結果タイプ](https://docs.aws.amazon.com/ja_jp/guardduty/latest/ug/guardduty-finding-types-eks-audit-logs.html)

      ### Runtime Monitoring

      EKSクラスタ上で実行されるコンテナのランタイム挙動を監視し、リアルタイムで脅威を検出します。EC2ベースのワーカーノードでのみ利用可能です。

      Runtime Monitoring はアカウント単位で機能を有効または無効にします。

      さらに、EKSに GuardDuty セキュリティエージェント をデプロイすることで監視できます。導入方法は自動または手動が選べます。

      - 自動: GuardDutyがEKSにエージェントをデプロイします。デフォルトではすべてのEKSクラスタに対して自動的に有効になります。任意のクラスタを選択または除外できます。VPCエンドポイントが自動で作成されます。[Amazon EKS リソースのセキュリティエージェントの自動管理](https://docs.aws.amazon.com/ja_jp/guardduty/latest/ug/managing-gdu-agent-eks-automatically.html)
      - 手動: EKSクラスタにエージェントを手動でデプロイします。EKSアドオンで導入可能です。必要なVPCエンドポイントも手動で作成します。[Amazon EKS クラスターのセキュリティエージェントの手動管理](https://docs.aws.amazon.com/ja_jp/guardduty/latest/ug/managing-gdu-agent-eks-manually.html)

      以下の脅威を検出します。

      [GuardDuty Runtime Monitoring の検出結果タイプ](https://docs.aws.amazon.com/ja_jp/guardduty/latest/ug/findings-runtime-monitoring.html)

      ### Malware Protection for EC2

      EC2インスタン上のアプリケーション、コンテナで疑わしい動作を検出した際にEBSボリュームをスキャンし、マルウェアの検出を行います。EKSクラスタ上のEC2インスタンスで実行されるPodも対象です。

      スキャンは以下の脅威を検出した際に自動で行われます。また、オンデマンドで手動でスキャンも可能です。

      [GuardDuty 実行型マルウェアスキャンを起動する検出結果](https://docs.aws.amazon.com/ja_jp/guardduty/latest/ug/gd-findings-initiate-malware-protection-scan.html)

      以下の脅威を検出します。

      [Malware Protection for EC2 の検出結果のタイプ](https://docs.aws.amazon.com/ja_jp/guardduty/latest/ug/findings-malware-protection.html)

      # プラクティス
      - GuardDutyを有効化し、EKSを保護する
        - Terraformのguarddutyモジュールを作成する
        - アカウントでGuardDutyを有効化する（すでにアカウントで有効になっている場合はコード実装不要）
        - EKS Protectionを有効化（すでにアカウントで有効になっている場合はコード実装不要）
        - Runtime Monitoringを有効化（すでにアカウントで有効になっている場合はコード実装不要）
          - GuardDutyセキュリティエージェントをEKSクラスタに**手動**でデプロイする
          - VPCエンドポイントを作成する
        - Malware Protection for EC2を有効化（すでにアカウントで有効になっている場合はコード実装不要）
      - 以下で動作確認可能
        - EKSクラスタ内のcurlコマンドが実行できる任意のPod(frontend等)で以下を実行
          ``` bash
          curl http://169.254.169.254.sslip.io/latest/meta-data/
          ```
        - しばらく(2分位)するとRuntime Monitoringで`UnauthorizedAccess:Runtime/MetadataDNSRebind`が検出される。また、それを契機にMalware protection for EC2がEBSをスキャンする。

  - title: 静的解析ツールによるTerraformのセキュリティスキャン
    body: |
      TerraformやK8sマニフェストを静的解析ツールを使用してスキャンすることで、セキュリティの脆弱性や設定ミスを事前に検出できます。Infrastructure as Code（IaC）のセキュリティベストプラクティスに従っているかを自動的にチェックすることで、安全なインフラ構築を実現できます。

      # 静的解析の必要性
      - IaCに含まれるセキュリティ上の問題を早期に発見
      - 設定ミスによるセキュリティリスクの軽減
      - セキュリティベストプラクティスの遵守を自動化
      - コードレビュー時のセキュリティチェックを効率化

      # 解決策の選択肢
      - Checkov - Bridgecrew（現Prisma Cloud）が開発したオープンソースのIaCセキュリティスキャナー
      - tfsec - Terraformに特化したセキュリティスキャナー（現在はTrivyに統合）
      - Terrascan - Tenable社が開発したIaC用セキュリティスキャナー
      - Trivy - Aqua Security社が開発した多機能セキュリティスキャナー

      本プラクティスではTrivyを採用します。Trivyは多機能で軽量、かつ活発に開発されており、Terraformの他にもコンテナイメージ、Kubernetes、設定ファイルなど幅広いスキャンに対応しているためです。

      # Trivyによる静的解析
      Trivyは包括的なセキュリティスキャナーで、以下の機能を提供します：
      - Terraformコードの設定ミスやセキュリティ問題の検出
      - コンテナイメージの脆弱性スキャン
      - Kubernetesマニフェストのセキュリティ設定チェック
      - ファイルシステムの脆弱性スキャン

      ## Terraformスキャンで検出される問題例
      - S3バケットのパブリックアクセス設定
      - セキュリティグループの過度に緩い設定（0.0.0.0/0の許可等）
      - 暗号化が無効になっているリソース
      - IAMポリシーの過度な権限付与
      - ログ記録が無効になっているサービス
      - パスワードやアクセスキーのハードコード

      ## スキャン手順
      1. Trivyをインストール
      2. Terraformコードに対してスキャンを実行
      3. 検出された問題を確認・対応
      4. 必要に応じて設定を調整して再スキャン

      # プラクティス
      - Trivyを使用してTerraformコードのセキュリティスキャンを実行する
        - Trivyをインストール（手順は公式ドキュメント参照[Installing Trivy](https://trivy.dev/v0.57/getting-started/installation/)）
        - `/codes/`ディレクトリ配下の任意のTerraformコードとK8sマニフェストを以下のようにスキャンする
          ```bash
          trivy config codes/
          ```
        - 検出されたセキュリティ問題を確認し、重要度の高い問題に対応する
        - 対応後、再スキャンを実行して問題が解決されたことを確認する

  - title: SBOMによるソフトウェア部品の可視化
    body: |
      SBOM（Software Bill of Materials）は、ソフトウェアに含まれるコンポーネント、ライブラリ、依存関係を詳細に記録した"部品表"です。コンテナイメージのSBOMを生成・分析することで、使用しているソフトウェア部品を可視化し、脆弱性管理やライセンス管理を効率化できます。

      # SBOMの必要性
      - 現代のソフトウェアは多数のオープンソースライブラリや第三者製コンポーネントに依存
      - 使用している部品を把握していないと、脆弱性発見時の影響範囲が不明
      - ライセンス違反や法的リスクの回避が困難
      - セキュリティインシデント発生時の迅速な対応が不可能

      # 解決策
      - SBOMの自動生成によるソフトウェア部品の可視化
        - Trivyを使用したコンテナイメージからのSBOM生成
        - SPDX/CycloneDX形式での標準化されたSBOM出力
        - CI/CDパイプラインへの統合による継続的なSBOM生成

      本プラクティスではTrivyを採用します。既に静的解析プラクティスで導入済みのTrivyを使用することで、ツールの運用負荷を軽減しつつ、効率的なSBOM生成を実現します。

      # SBOMの活用方法

      ## ソフトウェア部品の可視化とガバナンス
      - **部品の包括的な可視化** - コンテナイメージに含まれる全パッケージとバージョン、直接的・間接的依存関係を明示
      - **ライセンス情報の管理** - ライセンス情報の収集・一元管理による法的リスクの回避
      - **監査とコンプライアンス** - 監査対応時の迅速な情報提供と使用パッケージの承認プロセス効率化
      - **サプライチェーンリスク管理** - 使用ソフトウェア部品のサプライチェーンリスクの可視化と評価

      ## 標準フォーマット
      - **SPDX（Software Package Data Exchange）** - Linux Foundationが主導する標準フォーマット
      - **CycloneDX** - OWASP主導のセキュリティ重視の軽量フォーマット
      - 両フォーマットとも業界標準として広く採用

      # プラクティス
      - Trivyで`CycloneDX`形式のSBOMを生成

      ## 更に発展的なプラクティス
      このプラクティスは余裕がなければやらなくてもいいです。

      **Dependency-Track**は、SBOMを活用したソフトウェア構成分析のためのOWASPプロジェクトです。複数プロジェクトのSBOMを統合管理し、脆弱性の継続監視やライセンス管理をWebダッシュボードで行えます。

      - Dependency-Trackによる可視化の実装
        - helmでDependency-TrackをEKSにデプロイ [Deploying on Kubernetes | Dependency-Track](https://docs.dependencytrack.org/getting-started/deploy-kubernetes/)
        - Dependency-Trackに接続し、Trivyで作成したSBOMをアップロードして可視化
