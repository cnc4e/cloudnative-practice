issues:
  - title: 用途によるノードプールの分割
    body: |
      本格的なKubernetesクラスターでは、異なるワークロードを1つのクラスターで運用することが一般的です。その際、ワークロードごとの影響を最小限に抑えるため、用途別にノードを分割することが推奨されます。これにより、リソースの効率的な利用とセキュリティの向上が図れます。

      # ノード分割の必要性
      - アプリケーションとシステムコンポーネントの混在によるリソース競合
      - 異なるワークロードタイプに対する最適化不足（CPU集約的 vs メモリ集約的）
      - セキュリティ要件の違い（機密データを扱うアプリケーション vs 一般的なワークロード）
      - コンピューティングタイプの違い（Spot vs On-Demand、GPUの有無）
      
      # 解決策
      - Kubernetesレベルでの配置制御: PodのAffinity設定などでワークロードごと稼働するノードを制御。複数のPodに対する設定が必要で、運用が複雑になる。
      - インフラレベルでのノード分離: ノードプールを用途別に分割し、異なるノードグループでワークロードを管理。これにより、リソースの効率的な利用とセキュリティの向上が図れる。
      
      本プラクティスでは**インフラレベルでのノード分離**を採用します。インフラレベルでの完全分離、用途別最適化、運用のシンプルさ、セキュリティ境界の明確化が可能なためです。

      # EKS AutoModeでのノードプール分割
      - `nodeClass`リソースでノード設定のテンプレート化
      - `nodePool`リソースでノードのスペック範囲やノード終了の挙動を定義
      - `nodeSelector`、`tolerations`、`affinity`でPodの配置先を指定
      
      ## 一般的なノード分割パターン
      
      ### 1. システムコンポーネント用ノードプール
      - kube-system、aws-load-balancer-controller、cluster-autoscaler等
      - システム専用のtaintを設定
      
      ### 2. アプリケーション用ノードプール
      - ユーザーアプリケーション
      - 一般的なワークロード用の設定

      ### 3. 特定用途ノードプール（オプション）
      - GPU必要なML/AI ワークロード
      - 高メモリ要求のデータベース
      - セキュリティ要件の高いアプリケーション

      # EKS AutoMode組み込みのNodePoolについて

      EKS AutoModeでは`system`と`general-purpose`の2つの組み込みノードプールがあり、任意に有効/無効できます。いずれかのノードプールを有効にすると`default`というノードクラスが作成されノードプールで使用されます。すぐに利用出来て便利な反面、ノードプールの設定変更ができません。任意のノード設定やマシンタイプを指定したい場合、カスタムのノードクラスおよびノードプールを作成する必要があります。

      # プラクティス
      
      - システムコンポーネント用のnodePoolを作成する
        - 組み込みノードプールの`system`を無効
        - カスタムノードクラス`system`を作成
          - 設定は`default`と同じでいい
        - カスタムノードプール`system`を作成
          - 基本的には`general-purpose`と同じでいい
          - ノードクラスは`system`を指定
          - taintsで`Key:system`、`Effect:NoSchedule`を設定
      - `system`にPodをスケジュールする
        - `amazon-cloudwatch-observability-controller-manager`や`snapshot-controller`などのPodを`system`で動かす
          - EKSアドオンでデプロイしたものはアドオンの設定を変更する
