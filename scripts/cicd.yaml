issues:
  # - title: cert-managerをセットアップする
  #   body: |
  #     cert-manager をセットアップする**cert-manager**モジュールを作成する。  
  #     コードは`codes`ディレクトリ配下に`cert-manager`ディレクトリを作成し、そこにコードを配置する。  
  #     コードを作成し、リソースのデプロイが完了したらPRを出す。
      
  #     # cert-managerについて
  #     cert-manager は K8s のためのオープンソースの証明書管理ツールです。  
  #     K8s のリソースとして証明書を管理し、証明書の自動更新や発行を行うことができます。  
  #     K8s にインストールするオペレーターなどのカスタムコントローラーはAPIサーバーと通信します。  
  #     その際、通信の暗号化のためにTLS証明書が必要になります。  
  #     cert-manager はそのTLS証明書を自動で管理してくれるツールです。  
  #     多くのオペレーターは導入前提として cert-manager を必要とします。

  #     # 欲しいもの
  #     - cert-manager
  #       - helm を使いインストール
  #         - 以下オプションを values.yaml に定義してコードに残す
  #           - crd: true
  #           - prometheus: false
  #       - インストール方法は[ここ](https://cert-manager.io/docs/installation/helm/)を参考にする

  #     # その他
  #     helmの使い方は次を参考にすること。
  #     - [Helmの使い方](https://helm.sh/ja/docs/intro/using_helm/)
  #     - [Helmの使い方を3分で理解する](https://qiita.com/MahoTakara/items/3c509235cc18bd407f07)
  - title: GitHub Actions Runnerをセットアップする
    body: |
      CIを実行するためのGitHub Actions Runnerをセットアップする。  
      コードは`codes`ディレクトリ配下に`actions/k8s`ディレクトリを作成し、そこにコードを配置する。  
      コードを作成し、リソースのデプロイが完了したらPRを出す。

      # 構成説明
      GitHub Actions は GitHub の PullRequest などをトリガーにワークフローを実行する。  
      ワークフローには複数のジョブを含めることができ、各ジョブはGitHub Actions Runner（ランナー）で実行される。  
      ランナーはGitHubのサーバー上で実行されるホスト型ランナーと、ユーザーが管理するセルフホスト型ランナーの2種類がある。  
      今回はセルフホスト型のランナーをK8sに作成する。  
      ランナーを作る方法はいくつかあるが、ここでは [GitHub Actions Runner Controller](https://github.com/actions/actions-runner-controller)(ARC) を使用する。  
      ARCはK8sにインストールするオペレーター（特定のアプリケーションやサービスの運用を自動化する仕組み）の一つ。  
      ARCを使用することで、K8sのPodとしてGitHub Actions Runnerを実行できるようになる。

      # 欲しいもの
      - ARC
        - helmを使いインストール
          - インストール方法は[Actions Runner Controller のクイックスタート](https://docs.github.com/en/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/quickstart-for-actions-runner-controller)を参考にする
        - `helm install`のコマンド全文を`actions/k8s`ディレクトリ配下の`README.md`に書いて保存すること
      - GitHub認証情報を格納した K8s Secret
        - [参考](https://docs.github.com/en/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/authenticating-to-the-github-api#deploying-using-personal-access-token-classic-authentication)
        - 名前は`pre-defined-secret`など任意
        - 認証方法は`PAT`または`GitHub App`を使用する
          - `PAT`の方が設定は楽。ただしトークンは個人に紐づく
          - `GitHub App`の方は個人に紐づかないため実PJ向き
        - 認証情報を格納したSecretはマニフェストにせずGitに**含めない**こと
          - Gitに認証情報を含めると漏洩する可能性があるため
      - RunnerScaleSet
        - helmを使いインストール
          - インストール方法は[Actions Runner Controller のクイックスタート](https://docs.github.com/en/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/quickstart-for-actions-runner-controller#configuring-a-runner-scale-set)を参考にする
        - `helm install`のコマンド全文を`actions/k8s`ディレクトリ配下の`README.md`に書いて保存すること
        - valueファイルを作成し`helm install`コマンドの引数に指定する
          - ファイル名は`arc-runner-set-value.yaml`など任意
          - `githubConfigUrl`に自身の`cloudnative-practice`リポジトリを指定
          - `githubConfigSecret`にGitHubの認証情報を格納したSecretの名前を指定
          - `template.spec.serviceAccountName`に`arc-runner`を指定
          - 以下、valueファイルのサンプル
            ``` yaml
            githubConfigUrl: https://github.com/ORG/REPO
            githubConfigSecret: pre-defined-secret
            template:
              spec:
                serviceAccountName: arc-runner
            ```
        - `helm install`のコマンド全文を`actions/k8s`ディレクトリ配下の`README.md`に書いて保存すること

      # 確認
      RunnerScaleSetデプロイ後、GitHubの自身の`cloudnative-practice`リポジトリで settings > Actuins > Runners を開きRunnerがオンラインになっていることを確認する。

      # 参考
      helmの使い方は次を参考にすること。
      - [Helmの使い方](https://helm.sh/ja/docs/intro/using_helm/)
      - [Helmの使い方を3分で理解する](https://qiita.com/MahoTakara/items/3c509235cc18bd407f07)
  - title: Runner用のServiceAccount、Role、RoleBindingsを作成する
    body: |
      Runner Pod が K8s 内部のリソースを操作出来るように関連リソースを作成する。  
      コードは`codes/actions/k8s`ディレクトリに配置する。  
      コードを作成し、リソースのデプロイが完了したらPRを出す。

      # 前提
      - GitHub Actions Runnerのセットアップが完了していること

      # 欲しいもの
      - Runner用のServiceAccount
        - 名前は`arc-runner`
        - Namespaceは`arc-runners`
      - Runner用のRole
        - 名前は`arc-runner`
        - Namespaceは`arc-runners`
        - 以下の権限を持つ
          - `apps` APIグループの`deployments`リソースに対して`create`, `get`, `delete`の権限
          - `""` APIグループの`pods`リソースに対して`get`, `list`の権限
          - `""` APIグループの`pods/exec`リソースに対して`create`の権限
      - Runner用のRoleBinding
        - 名前は`arc-runner`
        - Namespaceは`arc-runners`
        - `arc-runner` ServiceAccount に対して `arc-runner` Role をバインドする
  - title: GitHub Actions の動作確認をする
    body: |
      セットアップしたセルフホストランナーでワークフローが実行できることを確認する。
      動作確認用に手動トリガーで実行するワークフローを作成する。
      GitHub Actionsのワークフローは`.github/workflows/`ディレクトリに定義ファイルを配置する。

      # 前提
      - Runner用のServiceAccount、Role、RoleBindingsを作成する

      # やること

      - 以下の内容の`test.yml`をリポジトリのルート直下``.github/workflows/``ディレクトリに作成する。`runs-on`に settings > Actuins > Runners で確認できるRunner名を指定
        ```yaml
        name: Self-hosted Runner Test

        on:
          workflow_dispatch:  # 手動トリガー

        jobs:
          test-runner:
            runs-on: arc-runner-set
            steps:
              - name: 確認用の echo 出力
                run: echo "🎉 Self-hosted Runner でワークフローが実行されました！"
        ```
      - 変更をコミットし、GitHubにプッシュする。PRは不要（PRを出してもいい）。
      - GitHubで Actions タブを開き、左のワークフロー一覧に`Self-hosted Runner Test`が表示されていることを確認
      - `Self-hosted Runner Test`を選択し`Run workflow`ボタンをクリックしてワークフローを実行
      - しばらくしてから画面をリロードするとワークフローが実行される。茶色は実行中、緑は成功、赤は失敗
      - 緑になったらワークフローを選択。実行されたジョブが表示される。`test-runner`ジョブを選択し、ジョブの詳細を表示
      - `確認用の echo 出力`のステップを選択し、`🎉 Self-hosted Runner でワークフローが実行されました！`と表示されていれば成功
  - title: Runner に Pod Identity でIAMロールをアタッチする
    body: |
      Runner が ECR にアクセスできるように、Pod Identity を使って IAM ロールをアタッチする。
      コードは`codes/actions/terraform`ディレクトリに配置する。
      コードを作成し、リソースのデプロイが完了したらPRを出す。

      # 前提

      - GitHub Actions Runnerのセットアップが完了していること

      # EKSのPodのIAMロールについて

      EKSのPodはデフォルトではノードのIAMロールを継承する。
      ノードのIAMに必要以上に権限を与えると、ノード上で動くPodに不必要な権限が与えられてしまう。
      そのため、Podごとに必要な権限を与えるIAMロールをアタッチすることが推奨される。

      EKSにはPodにIAMロールをアタッチする方法が2つあるが、EKSオートモードでは [Pod Identity](https://docs.aws.amazon.com/ja_jp/eks/latest/userguide/pod-identities.html)がデフォルト使えるため本プラクティスでは Pod Identity を使用する。

      # 欲しいもの

      - Runner Podに付与するIAMロール
        - 必要な権限は以下の通り
          - `ecr:GetAuthorizationToken`
          - `ecr:BatchCheckLayerAvailability`
          - `ecr:GetDownloadUrlForLayer`
          - `ecr:BatchGetImage`
          - `ecr:PutImage`
          - `ecr:InitiateLayerUpload`
          - `ecr:UploadLayerPart`
          - `ecr:CompleteLayerUpload`
        - IAMロールは Pod Identity を使ってアタッチできるように信頼ポリシーを設定する
          - `Service:pods.eks.amazonaws.com`
          - `Action:["sts:AssumeRole","sts:TagSession"]`
      - Pod Identity の設定 [aws_eks_pod_identity_association](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/eks_pod_identity_association)
        - Runner Pod用に作成したロールを Pod Identity にアタッチする
        - Runner Pod の Namespace と ServiceAccount は以下を指定
          - ns:arc-runners
          - sa:arc-runner
        - EKSクラスタ名はできればeksモジュールからoutputで取得すること

      # 参考
      [IAM ロールを Kubernetes サービスアカウントに割り当てる](https://docs.aws.amazon.com/ja_jp/eks/latest/userguide/pod-id-association.html)
  - title: ECRにログインするGitHub Actionsのワークフローを作成する
    body: |
      GitHub Actions のワークフローで ECR にアクセスできることを確認する。
      コードは`.github/workflows/`ディレクトリに配置する。
      コードを作成し、リソースのデプロイが完了したらPRを出す。

      # 前提
      - GitHub Actions の動作確認をする
      - Runner用のServiceAccount、Role、RoleBindingsを作成する
      - Runner に Pod Identity でIAMロールをアタッチする

      # 欲しいもの
      - ECRへのログインステップを含んだワークフロー
        - 新規にファイルを作ってもいいし、test.ymlを改良しても良い
        - `main`ブランチにプッシュされた時にワークフローを実行する
          - マージ前に動作確認したければmainブランチから作業ブランチに変更するといい
        - Runnerはセルフホストのランナー名を指定
        - ECRのログインには[docker/login-action@v3](https://github.com/docker/login-action)のアクションを使用
        - `registry`にはECRのレジストリURLを指定
          - 例: `アカウントID.dkr.ecr.リージョン.amazonaws.com`
        - Runner にIAMロールをアタッチしているためユーザー名とパスワードは指定しない

      # 確認
      マージ後、ワークフローが実行され、ECRへのログインが成功することを確認する。
  - title: フロンエンドのコンテナをビルドしてECRにプッシュするワークフローを作成する
    body: |
      GitHub Actions のワークフローでフロントエンドのイメージをビルドして ECR にプッシュする。
      コードは`.github/workflows/`ディレクトリに配置する。
      コードを作成し、リソースのデプロイが完了したらPRを出す。

      # 前提
      - ECRにログインするGitHub Actionsのワークフローを作成する

      # K8s の Pod で`docker build`する方法
      Podはコンテナです。コンテナの中でDockerを実行するには管理者権限が必要です。
      そのため、K8sのPodでDockerを実行するには特別な設定が必要でした。
      しかし、この特別な設定はセキュリティ上のリスクがあるため、K8sでは推奨されていません。
      そこで、K8sでは`docker buildx`を使用してコンテナイメージをビルドすることが推奨されています。
      `docker buildx`はK8sのPodでDockerイメージをビルドするためのツールです。
      `docker buildx`を使用することで、K8sのPodでDockerイメージをビルドすることができます。

      # 欲しいもの
      - フロントエンドのイメージをビルドして ECR にプッシュするワークフロー
        - ファイル名は`frontend.yml`など任意
        - ワークフローは`main`ブランチにプッシュされ、`./codes/frontend/app`配下が更新た時にする
          - マージ前に動作確認したければmainブランチから作業ブランチにし、pathsの指定を外せばいい
        - Runner はセルフホストのランナー名を指定
        - 以下のステップを含む
          - コードのチェックアウト
            - アクションは[actions/checkout](https://github.com/actions/checkout)を使用
          - ECRへのログイン
            - `ECRにログインするGitHub Actionsのワークフローを作成する`で作成したワークフローを参考にする
          - Docker Buildxのセットアップ
            - アクションは[docker/setup-buildx-action](https://github.com/docker/setup-buildx-action)を使用
            - `driver`は`kubernetes`を指定
            - `driver-opts`には最低限以下を指定
              - `namespace=arc-runners`
          - イメージタグの設定
            - `run`ステップで以下のコマンドを実行
              ```bash
              echo "IMAGE_TAG=$(TZ='Asia/Tokyo' date +'%Y%m%d%H%M')" >> $GITHUB_ENV
              ```
          - Buildxを使ったイメージビルド
            - アクションは[docker/build-push-action](https://github.com/docker/build-push-action)を使用
            - `env`に`DOCKER_BUILD_SUMMARY: false`を指定
            - パラメーターは最低限以下を指定
              - context: ./codes/frontend/app
              - push: true
              - provenance: false
              - tags: 自身のECRのレジストリURLとイメージ名を指定
                - タグは`イメージタグの設定`ステップで設定した`IMAGE_TAG`環境変数を使用
      - フロントエンドの変更
        - code/frontend/app/public/index.htmlの`<title>`タグを`Frontend Sample Build By CI`などに変更する

      # 確認
      マージ後、ワークフローが実行され、ECRにフロントエンドのイメージがプッシュされることを確認する。

  - title: バックエンドのコンテナをビルドしてECRにプッシュするワークフローを作成する
    body: |
      GitHub Actions のワークフローでバックエンドのイメージをビルドして ECR にプッシュする。
      コードは`.github/workflows/`ディレクトリに配置する。
      コードを作成し、リソースのデプロイが完了したらPRを出す。

      # 前提
      - フロンエンドのコンテナをビルドしてECRにプッシュするワークフローを作成する
      
      # 欲しいもの
      - バックエンドのイメージをビルドして ECR にプッシュするワークフロー
        - ファイル名は`backend.yml`など任意
        - フロントエンドのワークフローを参考に、同じようなトリガー、ステップで作成する
      - バックエンドの変更
        - codes/backend/app/index.jsのmessageを`CIでビルドしました`などに変更する

      # 確認
      マージ後、ワークフローが実行され、ECRにフロントエンドのイメージがプッシュされることを確認する。
  - title: Argo CD をインストールする
    body: |
      # 欲しいもの
      - Argo CD
        - helmを使いインストール
          - チャートは[argo-helm](https://github.com/argoproj/argo-helm)を使用する
        - `helm install`のコマンド全文を`actions/k8s`ディレクトリ配下の`README.md`に書いて保存すること

      # 確認
      - Argo CDのWeb UIにアクセスしログインできることを確認する。
        - `admin`ユーザーの初期パスワードはSecretリソース`argocd-initial-admin-secret`に記載されている
          - データはbase64エンコードされているためデコードすること
            ``` sh
            echo <base64エンコードされたパスワード> | base64 --decode
            ```
        - Serviceリソース`argocd-server`をローカル端末に以下のようなコマンドでポートフォワードしてアクセスする
          ``` sh
          kubectl port-forward svc/argocd-server -n argocd 8080:443
          ```
          - ブラウザで`https://localhost:8080`にアクセスする
            - セキュリティ警告は無視する
  - title: Arog CD のリポジトリ設定をする
    body: |
      Argo CD で自身の`cloudnative-practice`リポジトリにアクセスするための設定を行う。

      # 前提
      - Argo CD をインストールする
      
      # やること
      - Argo CD の Web UI にログインする
        - ログイン方法は`Argo CD をインストールする`を参照
      - Settings > Repositories を開く
      - `Connect Repo`をクリック
      - 以下のように入力して`CONNECT`
        - Choose your connection method: VIA http/https
        - CONNECT REPO USING SSH
          - Name: 任意(自身のGitHubアカウント名/cloudnative-practiceなど)
          - Project: default
          - Repository URL: 自身の`cloudnative-practice`リポジトリのURL（例：https://github.com/アカウント名/cloudnative-practice）
          - Username: 任意(自身のGitHubアカウント名など)
          - Password: GitHubのPersonal Access Token(PAT)を入力

      # 確認
      - Settings > Repositories 画面で追加したリポジトリが表示され`CONNECTION STATUS`が`Successful`になっていることを確認する。
  - title: Argo CD にフロントエンドのアプリケーションを追加する
    body: |
      フロントエンドを Argo CD で管理するためのアプリケーションを追加する。
      コードは`codes/frontend/k8s`ディレクトリに配置する。
      コードを作成し、リソースのデプロイが完了したらPRを出す。

      # 前提
      - Argo CD のリポジトリ設定をする
      
      # Argo CD の設定
      Argo CD の設定もK8sマニフェストで管理できます。
      とくに、アプリケーションの定義はK8sの`Application`リソースで行います。

      # 欲しいもの
      - フロントエンドのapplicationリソース
        - [directory](https://argo-cd.readthedocs.io/en/stable/user-guide/directory/#directory)タイプのアプリケーション
        - 名前は`frontend`など任意
        - Namespaceは`argocd`
        - targetRevisionは`main`ブランチを指定
        - pathはフロントエンドのK8sマニフェストが配置されている`codes/frontend.k8s`ディレクトリを指定
        - syncPolicyは`automated`を指定

      # 確認
      - Argo CD の Web UI でアプリケーションが追加されていることを確認する
      - また、追加したアプリケーションの`SYNC STATUS`が`Synced`になっていることを確認する
  - title: Argo CD にバックエンドのアプリケーションを追加する
    body: |
      バックエンドを Argo CD で管理するためのアプリケーションを追加する。
      コードは`codes/frontend/k8s`ディレクトリに配置する。
      コードを作成し、リソースのデプロイが完了したらPRを出す。

      # 前提
      - Argo CD のリポジトリ設定をする
      
      # Argo CD の設定
      Argo CD の設定もK8sマニフェストで管理できます。
      とくに、アプリケーションの定義はK8sの`Application`リソースで行います。

      # 欲しいもの
      - バックエンドのapplicationリソース
        - [directory](https://argo-cd.readthedocs.io/en/stable/user-guide/directory/#directory)タイプのアプリケーション
        - 名前は`backend`など任意
        - Namespaceは`argocd`
        - targetRevisionは`main`ブランチを指定
        - pathはバックエンドのK8sマニフェストが配置されている`codes/backend.k8s`ディレクトリを指定
        - syncPolicyは`automated`を指定

      # 確認
      - Argo CD の Web UI でアプリケーションが追加されていることを確認する
      - また、追加したアプリケーションの`SYNC STATUS`が`Synced`になっていることを確認する
  - title: Argo CD ImageUpdaterをインストール
    body: |
      ECRにプッシュしたイメージをArgo CDで自動的に更新するためのImageUpdaterをインストールする。
      コードは`codes/actions/k8s`ディレクトリに配置する。