issues:
  - title: ワーカーの拡張
    body: |
      **本issueは内容を確認するだけでクローズしてください。**

      K8sのPodはEC2などのワーカーノード上で動作します。Podが増えるとワーカーノードのリソースが不足することがあります。 その場合、ワーカーノードを追加してリソースを確保する必要があります。

      # ワーカーの拡張の必要性
      - Podの数が増えると、既存のワーカーノードのリソース（CPU、メモリ）が不足することがある
      - リソース不足により、Podがスケジュールされず、アプリケーションの可用性が低下する
      - 手動でノードを追加するのは手間がかかり、運用負荷が増大する
      - 自動でノードを追加・削除する仕組みが必要

      # 解決策
      - クラスターオートスケーラーを使用してノードの自動拡張を実現する
      - Fargateなどのオンデマンド型のワーカーノードを利用する
      - Karpenterを使用してノードの自動拡張を実現する

      本プラクティスでは、EKS AutoModeを使用しています。EKS AutoMode は Karpenter 使い、ノードの自動拡張を実現します。

      # Karpenterによるワーカーの自動拡張
      - KarpenterはEKSクラスターのリソース使用状況を監視し、必要に応じてノードを自動で追加・削除する
      - Podのリソース要求に基づいて最適なノードタイプを選択し、コスト効率の良いリソースを提供する
